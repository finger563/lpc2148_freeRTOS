////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// FILE NAME:     $Source:$
//                $Date:$
//                $Revision:$
//
// AUTHOR:        Jean-Sebastien Stoezel (js.stoezel@gmail.com)
//
// HISTORY:       $Log:$
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// INCLUDES
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "logomatic_v2.hpp"
#include "LPC214x.h"
#include "FreeRTOSConfig.h"


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// NAME:          LogomaticV2DelayMs
// DESCRIPTION:   Provides a delay by burning CPU cycles.
// RETURN VALUE:  None
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
static void LogomaticV2DelayMs(
			       const uint32_t count // in, approximate delay in milliseconds
			       );

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// NAME:          LogomaticV2PllFeed
// DESCRIPTION:   Feed the PLL.
// RETURN VALUE:  None
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
static void LogomaticV2PllFeed(void);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FUNCTIONS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void LogomaticV2Blinky(void)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  while(true)
    {
      LogomaticV2Stat(0, LOGOMATIC_STAT_ON);
      LogomaticV2Stat(1, LOGOMATIC_STAT_OFF);
      LogomaticV2DelayMs(500);
      LogomaticV2Stat(0, LOGOMATIC_STAT_OFF);
      LogomaticV2Stat(1, LOGOMATIC_STAT_ON);
      LogomaticV2DelayMs(500);
    }
} // LogomaticV2Blinky


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void LogomaticV2DelayMs(
			const uint32_t count // in
			)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  uint32_t i        = 0;
  uint32_t countMs  = count * 10000;
	
  for(i = 0; i < countMs; i++)
    asm volatile ("nop");

} // LogomaticV2DelayMs

void delay_ms(int count)
{
  int i;
  count *= 10000;
  for(i = 0; i < count; i++)
    asm volatile ("nop");
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void LogomaticV2Init(void)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  // Setting Multiplier and Divider values
  PLLCFG=0x25; // M = 6
  LogomaticV2PllFeed();

  // Enabling the PLL */
  PLLCON=0x1;
  LogomaticV2PllFeed();

#define PLOCK 0x400
  // Wait for the PLL to lock to set frequency
  while(!(PLLSTAT & PLOCK)) ;

  // Connect the PLL as the clock source
  PLLCON=0x3;
  LogomaticV2PllFeed();

  // Enabling MAM and setting number of clocks used for Flash memory fetch (4 cclks in this case)
  //MAMTIM=0x3; //VCOM?
  MAMCR=0x2;
  MAMTIM=0x4; //Original

  // Setting peripheral Clock (pclk) to System Clock (cclk)
  VPBDIV=0x1;

  PINSEL0 = 0;

  P0DIR |= led0  | led3;// PID_output
  P1DIR |= led1 | led2;
  P0SET = led0  | led3;
  P1SET = led1 | led2;
   
  LogomaticV2Stat(0, LOGOMATIC_STAT_ON);
  LogomaticV2Stat(1, LOGOMATIC_STAT_ON);
} // LogomaticV2Init

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void LogomaticV2PllFeed(void)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  PLLFEED=0xAA;
  PLLFEED=0x55;
} // LogomaticV2PllFeed

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void LogomaticV2Stat(
		     const uint32_t statNum, // in
		     const uint32_t onOff    // in
		     )
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  if(1 == statNum)
    {
      // Stat1
      if(LOGOMATIC_STAT_ON == onOff)
	{
	  // ON
	  P0CLR = led0;
	}
      else
	{
	  // OFF
	  P0SET = led0;
	}
    }
  else
    {
      // Stat0
      if(LOGOMATIC_STAT_ON == onOff)
	{
	  // ON
	  P1CLR = led1;
	}
      else
	{
	  // OFF
	  P1SET = led1;
	}
    }
} // LogomaticV2Stat
