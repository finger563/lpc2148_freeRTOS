////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// FILE NAME:     $Source:$
//                $Date:$
//                $Revision:$
//
// AUTHOR:        Jean-Sebastien Stoezel (js.stoezel@gmail.com)
//
// HISTORY:       $Log:$
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// INCLUDES
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "Logomatic_V2.hpp"
#include "LPC214x.h"
#include "CLpc21xxUartDev.hpp"
#include "FreeRTOSConfig.h"
#include "CLpc21xxSpiDev.hpp"
#include "SDCard.hpp"
#include "CScifu.hpp"
#include "CLog.hpp"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MACROS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
extern int32_t FatFSInit(void);


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// STATIC VARIABLES
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
static CLpc21xxUartDev              lpc21xxUart0(reinterpret_cast<uint8_t *>(0xE000C000), configCPU_CLOCK_HZ);
static CLpc21xxSpiDev               lpc21xxSpi0(0xE0020000, configCPU_CLOCK_HZ);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LOCAL FUNCTIONS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Spi0Select(
   const uint8_t index
   )
{
   switch(index)
   {
      default:
      {
         IOCLR0 |= (1<<7);
      }
   }
}

void Spi0UnSelect(
   const uint8_t index
   )
{
   switch(index)
   {
      default:
      {
         IOSET0 |= (1<<7);
      }
   }
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// NAME:          LogomaticV2DelayMs
// DESCRIPTION:   Provides a delay by burning CPU cycles.
// RETURN VALUE:  None
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
static void LogomaticV2DelayMs(
   const uint32_t count // in, approximate delay in milliseconds
   );

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// NAME:          LogomaticV2PllFeed
// DESCRIPTION:   Feed the PLL.
// RETURN VALUE:  None
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
static void LogomaticV2PllFeed(void);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FUNCTIONS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void LogomaticV2Blinky(void)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
   PINSEL0 = 0xCF351505;
   PINSEL1 = 0x15441801;
   IODIR0 |= 0x00000884;

   while(true)
   {
      LogomaticV2Stat(0, LOGOMATIC_STAT_ON);
      LogomaticV2Stat(1, LOGOMATIC_STAT_OFF);
      LogomaticV2DelayMs(500);
      LogomaticV2Stat(0, LOGOMATIC_STAT_OFF);
      LogomaticV2Stat(1, LOGOMATIC_STAT_ON);
      LogomaticV2DelayMs(500);
   }
} // LogomaticV2Blinky


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void LogomaticV2DelayMs(
   const uint32_t count // in
   )
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
	uint32_t i        = 0;
   uint32_t countMs  = count * 10000;
	
   for(i = 0; i < countMs; i++)
		asm volatile ("nop");

} // LogomaticV2DelayMs

void delay_ms(int count)
{
	int i;
	count *= 10000;
	for(i = 0; i < count; i++)
		asm volatile ("nop");
}

void setup_uart0(int newbaud, char want_ints)
{
	int baud = newbaud;
	U0LCR = 0x83;   // 8 bits, no parity, 1 stop bit, DLAB = 1
	
	if(baud == 1200)
	{
		U0DLM = 0x0C;
		U0DLL = 0x00;
	}
	else if(baud == 2400)
	{
		U0DLM = 0x06;
		U0DLL = 0x00;
	}
	else if(baud == 4800)
	{
		U0DLM = 0x03;
		U0DLL = 0x00;
	}
	else if(baud == 9600)
	{
		U0DLM = 0x01;
		U0DLL = 0x80;
	}
	else if(baud == 19200)
	{
		U0DLM = 0x00;
		U0DLL = 0xC0;
	}
	else if(baud == 38400)
	{
		U0DLM = 0x00;
		U0DLL = 0x60;
	}
	else if(baud == 57600)
	{
		U0DLM = 0x00;
		U0DLL = 0x40;
	}
	else if(baud == 115200)
	{
		U0DLM = 0x00;
		U0DLL = 0x20;
	}

	U0FCR = 0x01;
	U0LCR = 0x03;   

	if(want_ints == 1)
	{
		/*enableIRQ();
		VICIntSelect &= ~0x00000040;
		VICIntEnable |= 0x00000040;
		VICVectCntl1 = 0x26;
		VICVectAddr1 = (unsigned int)UART0ISR;
		U0IER = 0x01;*/
	}
	else if(want_ints == 2)
	{
		/*enableIRQ();
		VICIntSelect &= ~0x00000040;
		VICIntEnable |= 0x00000040;
		VICVectCntl2 = 0x26;
		VICVectAddr2 = (unsigned int)UART0ISR_2;
		U0IER = 0X01;*/
	}
	else if(want_ints == 0)
	{
		VICIntEnClr = 0x00000040;
		U0IER = 0x00;
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void LogomaticV2Init(void)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
   // Setting Multiplier and Divider values
	PLLCFG=0x24; // M = 5
   LogomaticV2PllFeed();

   // Enabling the PLL */
   PLLCON=0x1;
   LogomaticV2PllFeed();

#define PLOCK 0x400
   // Wait for the PLL to lock to set frequency
   while(!(PLLSTAT & PLOCK)) ;

   // Connect the PLL as the clock source
   PLLCON=0x3;
   LogomaticV2PllFeed();

   // Enabling MAM and setting number of clocks used for Flash memory fetch (4 cclks in this case)
   //MAMTIM=0x3; //VCOM?
   MAMCR=0x2;
   MAMTIM=0x4; //Original

   // Setting peripheral Clock (pclk) to System Clock (cclk)
   VPBDIV=0x1;

	PINSEL0 = 0xCF351505;
	PINSEL1 = 0x15441801;
	IODIR0 |= 0x00000884;
	IOSET0 = 0x00000080;

	S0SPCR = 0x08;  // SPI clk to be pclk/8
	S0SPCR = 0x30;  // master, msb, first clk edge, active high, no ints
   
   LogomaticV2Stat(0, LOGOMATIC_STAT_ON);
   LogomaticV2Stat(1, LOGOMATIC_STAT_ON);
   
   CScifu::AddDevice(lpc21xxUart0, "uart0");
   setup_uart0(115200, 0);
   CScifu::AddIoDevice(lpc21xxUart0);
   
   CScifu::AddDevice(lpc21xxSpi0, "spi0");
   lpc21xxSpi0.AttachCs(Spi0Select, Spi0UnSelect,1);
   
   for(int i = 0; i < 21; i++)
   {
      char dummy = 0;
      lpc21xxSpi0.Write(&dummy, 1);
   }
   
   if(0 == SdCardSlotInit())
   {
      if(0 == FatFSInit())
      {
         LOG_INFO("LogomaticV2Init FatFSInit succeeded");
      } // if(0 == EfslStdioInit())
      else
      {
         LOG_ERROR("LogomaticV2Init FatFSInit failed");
      }
   } // if(0 == SdCardSlotInit(0))
   else
   {
      LOG_INFO("LogomaticV2Init SdCardSlotInit failed");
   }   

} // LogomaticV2Init

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void LogomaticV2PllFeed(void)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
   PLLFEED=0xAA;
   PLLFEED=0x55;
} // LogomaticV2PllFeed

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void LogomaticV2Stat(
   const uint32_t statNum, // in
   const uint32_t onOff    // in
   )
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  if(1 == statNum)
    {
      // Stat1
      if(LOGOMATIC_STAT_ON == onOff)
	{
	  // OFF
	  IOCLR0 = 0x00000800;
	}
      else
	{
	  // OFF
	  IOSET0 = 0x00000800;
	}
    }
  else
    {
      // Stat0
      if(LOGOMATIC_STAT_ON == onOff)
	{
	  // ON
	  IOCLR0 = 0x00000004;
	}
      else
	{
	  // OFF
	  IOSET0 = 0x00000004;
	}
    }
} // LogomaticV2Stat
