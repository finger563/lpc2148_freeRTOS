#ifndef csystemmonitor_included
#define csystemmonitor_included


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// FILE NAME:     $Source:$
//                $Date:$
//                $Revision:$
//
// AUTHOR:        Jean-Sebastien Stoezel (js.stoezel@gmail.com)
//
// DESCRIPTION:   The CSubsystem class offers a basic framework for any subsystem to be implemented. Basic services
//                include subsystem initialization, thread interfacing, and IPC handling.
//
// HISTORY:       $Log:$
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "CSubsystem.hpp"
#include "FreeRTOS.h"
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class CSystemMonitor : public CSubsystem
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   // TYPES
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   public:
   protected:
   private:

   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   // METHODS
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   
   public:

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // NAME:          CSystemMonitor
      // DESCRIPTION:   
      // RETURN VALUE:  
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////   
      CSystemMonitor(
         const uint32_t		rate,       // in
         char * 			   p_Name,     // in
         const uint32_t		stackSize,  // in
         const uint32_t		priority    // in
         );
      
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // NAME:          ~CSystemMonitor
      // DESCRIPTION:   
      // RETURN VALUE:  
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////   
	  ~CSystemMonitor();

   protected:

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // NAME:          Init
      // DESCRIPTION:   
      // RETURN VALUE:  
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////   
      virtual int32_t  Init(void);
   
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // NAME:          PeriodicHandler
      // DESCRIPTION:   
      // RETURN VALUE:  None.
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual void PeriodicHandler(void);
	  
   private:
      
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // NAME:          CSystemMonitor
      // DESCRIPTION:   
      // RETURN VALUE:  
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      CSystemMonitor();

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // NAME:          CpuLoadGet
      // DESCRIPTION:   
      // RETURN VALUE:  
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      uint8_t CpuLoadGet(void);
      
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // NAME:          CpuLoadGet
      // DESCRIPTION:   
      // RETURN VALUE:  
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      void CpuLoadGet(
         uint8_t &    cpuLoad,   // out
         uint32_t &  cpuCnt      // out
      );
      
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // NAME:          CpuLoadTask
      // DESCRIPTION:   
      // RETURN VALUE:  
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      static void CpuLoadTask(
         void * p_Parameters  // in
         );

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // NAME:          CpuLoadTask
      // DESCRIPTION:   
      // RETURN VALUE:  
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      void CpuLoadTask(void);

   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   // VARIABLES
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   //////////////////////////////////////////////////////////////////////////////////////////////////////////
   public:
   protected:
   private:
      uint32_t          m_CpuLoadCnt;
      uint32_t          m_CpuLoadRef;
      xSemaphoreHandle  m_CpuLoadMutex;
      xTaskHandle       m_CpuLoadTaskHandle;
      

}; // class CSystemMonitor : public CSubsystem

#endif // csystemmonitor_included
