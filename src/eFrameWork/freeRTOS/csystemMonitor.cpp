

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// FILE NAME:     $Source:$
//                $Date:$
//                $Revision:$
//
// AUTHOR:        Jean-Sebastien Stoezel (js.stoezel@gmail.com)
//
// HISTORY:       $Log:$
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "CSystemMonitor.hpp"
#include "CLog.hpp"
#include "freeRtos.h"
#include "task.h"
#include "logomatic_v2.hpp"
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CSystemMonitor::CSystemMonitor():
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   m_CpuLoadCnt(0),
   m_CpuLoadRef(CPU_LOAD_REFERENCE)
{} // CSystemMonitor::CSystemMonitor

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CSystemMonitor::~CSystemMonitor()
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{} // CSystemMonitor::~CSystemMonitor

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CSystemMonitor::CSystemMonitor(
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   const uint32_t rate,
   char *         p_Name,
   const uint32_t stackSize,
   const uint32_t priority
   )
{
   m_Rate			      = rate;
   mp_Name			      = p_Name;
   m_StackSize		      = stackSize;
   m_Priority		      = priority;
   m_CpuLoadRef         = CPU_LOAD_REFERENCE;
   m_CpuLoadCnt         = 0;
   m_CpuLoadMutex       = 0;
   m_CpuLoadTaskHandle  = 0;
} // CSystemMonitor::CSystemMonitor

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int32_t CSystemMonitor::Init(void)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
   int32_t     result = -1;

   LOG_TRACE("CSystemMonitor::Init");
   LOG_DEBUG("CSystemMonitor::Init sizeof this object is %u bytes", sizeof(CSystemMonitor));
   
   m_CpuLoadMutex = xSemaphoreCreateMutex();
   
   if(0 != m_CpuLoadMutex)
   {
      LOG_INFO("CSystemMonitor::Init m_CpuLoadMutex valid");
   }
   else
   {
      LOG_ERROR("CSystemMonitor::Init m_CpuLoadMutex");
   }
   
   // Create the CPU load task
   if(
    pdPASS == (xTaskCreate(CSystemMonitor::CpuLoadTask, reinterpret_cast<signed char const * const>("cpu_load"), 256, this, 0, &m_CpuLoadTaskHandle)))
   {
      LOG_DEBUG("CSystemMonitor::Init xTaskCreate succeeded");
      result = 0;
   }
   else
   {
      LOG_WARNING("CSystemMonitor::Init xTaskCreate failed with code");
      result = -1;
   }
   
   result = CSubsystem::Init();

   return result;
} // CSystemMonitor::Init

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t CSystemMonitor::CpuLoadGet(void)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
   uint8_t	result = 0;
   
   LOG_TRACE("CSystemMonitor::CpuLoadGet");
   
   xSemaphoreTake(m_CpuLoadMutex, portMAX_DELAY);
   
   // Auto-calibration
   if(m_CpuLoadCnt > m_CpuLoadRef)
   {
      LOG_INFO("CSystemMonitor::CpuLoadGet adjusting cpu load constant from %u to %u",m_CpuLoadRef, m_CpuLoadCnt);
      m_CpuLoadRef = m_CpuLoadCnt;
   }
   else
   {}
   
   if(0 == m_CpuLoadRef)
   {
      result = 100;
   }
   else
   {
      result = 100 - static_cast<uint8_t>((m_CpuLoadCnt * 100) / m_CpuLoadRef);
   }
   
   m_CpuLoadCnt = 0;
   
   xSemaphoreGive(m_CpuLoadMutex);
   
   return result;
   
} // CpuLoadGet

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CSystemMonitor::CpuLoadTask( void *pvParameters )
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
   LOG_TRACE("CSystemMonitor::CpuLoadTask");
   reinterpret_cast<CSystemMonitor *>(pvParameters)->CpuLoadTask();
} // CSystemMonitor::CpuLoadTask

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CSystemMonitor::PeriodicHandler(void)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
   uint8_t        	cpuLoad     = 0;
   CSubsystem *		p_Subsystem	= 0;
   uint32_t			i			= 0;
   
   LogomaticV2Stat(1, LOGOMATIC_STAT_ON);
   
   LOG_TRACE("CSystemMonitor::Task");
   
   p_Subsystem = CSubsystem::Get(i);

   while(0 != p_Subsystem)
   {
      LOG_INFO("CSystemMonitor::Task name=%s stack=%u%% is_suspended=%u", p_Subsystem->mp_Name, 100 * (p_Subsystem->m_StackSize*4 - uxTaskGetStackHighWaterMark(p_Subsystem->m_TaskHandle)) / (p_Subsystem->m_StackSize*4), xTaskIsTaskSuspended(p_Subsystem->m_TaskHandle));
      i++;
      p_Subsystem = CSubsystem::Get(i);
   }
   
   // CPU load task
   LOG_INFO("CSystemMonitor::Task name=cpu_load stack=%u%% is_suspended=%u", 100 * (256*4 - uxTaskGetStackHighWaterMark(m_CpuLoadTaskHandle)) / (256*4) , xTaskIsTaskSuspended(m_CpuLoadTaskHandle));
   
   cpuLoad = CpuLoadGet();
   LOG_INFO("CSystemMonitor::Task cpu_load=%u%%", cpuLoad);

   // Check heap size
   LOG_INFO("CSystemMonitor::Task heap=%u", xPortGetFreeHeapSize());
   
   // TODO: chceck command pool
   
   CSubsystem::PeriodicHandler();
   
   LogomaticV2Stat(1, LOGOMATIC_STAT_OFF);
} // CSystemMonitor::PeriodicHandler

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CSystemMonitor::CpuLoadTask(void)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
   while(true)
   {
      xSemaphoreTake(m_CpuLoadMutex, portMAX_DELAY);
      m_CpuLoadCnt++;
      xSemaphoreGive(m_CpuLoadMutex);
   } // for(;;)
} // CSystemMonitor::CpuLoadTask
