#ifndef lpc2000analogsampler_included
#define lpc2000analogsampler_included

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// FILE NAME:     $Source:$
//                $Date:$
//                $Revision:$
//
// AUTHOR:        Jean-Sebastien Stoezel (js.stoezel@gmail.com)
//
// DESCRIPTION:   The CLpc2000AnalogSampler class defines a framework for the sampling of analog channels for the LPC2000
//                microcontroller family.
//
// HISTORY:       $Log:$
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// INCLUDES
#include "CAnalogSampler.hpp"
#include <stdint.h>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MACROS
#define LPC2000_ANALOG_SAMPLER_NUM_CHANNELS_ADC0   (8)
#define LPC2000_ANALOG_SAMPLER_NUM_CHANNELS_ADC1   (8)
#define LPC2000_ANALOG_SAMPLER_NUM_CHANNELS        (LPC2000_ANALOG_SAMPLER_NUM_CHANNELS_ADC0 + LPC2000_ANALOG_SAMPLER_NUM_CHANNELS_ADC1)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class CLpc2000AnalogSampler : public CAnalogSampler
{
   
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   // TYPES
   public:
   protected:
   private:
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   // METHODS
   public:
   
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // NAME:          ~CLpc2000AnalogSampler()
      // DESCRIPTION:   Default destructor.
      // RETURN VALUE:  None.
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      ~CLpc2000AnalogSampler(void);
      
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // NAME:          CLpc2000AnalogSampler
      // DESCRIPTION:   Constructor to be used to initialize the subsystem.
      // RETURN VALUE:  None.
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      CLpc2000AnalogSampler(
         const uint32_t		   rate,       // in, rate at which the subsystem should be activated
         char const *        p_Name,     // in, name of the subsystem
         const uint32_t		   stackSize,  // in, size of the thread stack (32 bits)
         const uint32_t		   priority    // in, priority of the thread.
         );

   protected:

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // NAME:          Init
      // DESCRIPTION:   Initialize the subsystem.
      // RETURN VALUE:  0 on success, -1 otherwise.
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual int32_t Init(void);
      
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // NAME:          SampleGet
      // DESCRIPTION:   Populate the channel list with value from the ADC for the specified channel.
      // RETURN VALUE:  0 on success, -1 otherwise.
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual uint32_t SampleGet(
	      const uint32_t	channelId   // in, channel to sample.
	      );
      
   private:
      
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // NAME:          CLpc2000AnalogSampler()
      // DESCRIPTION:   Default constructor.
      // RETURN VALUE:  None.
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      CLpc2000AnalogSampler(void);
      
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   // VARIABLES
   public:
   protected:
      CAnalogSampler::sChannel_t  m_ChannelList[LPC2000_ANALOG_SAMPLER_NUM_CHANNELS]; // Channel list

   private:

   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   
}; // class CLpc2000AnalogSampler : public CAnalogSampler
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#endif // lpc2000analogsampler_included
