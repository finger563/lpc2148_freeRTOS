#ifndef cscheduler_included
#define cscheduler_included



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// FILE NAME:     $Source:$
//                $Date:$
//                $Revision:$
//
// AUTHOR:        Jean-Sebastien Stoezel (js.stoezel@gmail.com)
//
// DESCRIPTION:   The CScheduler class offers a way to hard schedule threads. 
//
// HISTORY:       $Log:$
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// INCLUDES
#include <stdint.h>

#include "eframework_config.hpp"

#ifdef FREERTOS
#include "freeRtos.h"
#include "queue.h"
#else
#endif


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class CScheduler
{
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   // TYPES
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   public:
      typedef struct sEntry_t
      {
         // Rate at which the task should be activated
         uint32_t           clkDivider;
         sEntry_t *         p_Next;

		#ifdef FREERTOS
         // Semaphore to be given to activate the task.
         // Must be created by the task that is registering.
		   xQueueHandle *     p_ActivationQueue;
		#endif
      }; // sEntry_t
   protected:
   private:

   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   // METHODS
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   public:

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // NAME:          NumEntriesGet
      // DESCRIPTION:   Get the number of entries registered with the scheduler.
      // RETURN VALUE:  Return the number f entries registered.
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      static uint32_t NumEntriesGet(void);
		 
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // NAME:          Register
      // DESCRIPTION:   Register the subsystem for periodic activations.
      // RETURN VALUE:  Return 0 on success, -1 on failure.
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      static int32_t Register(
         const uint32_t     rate,   // in, periodic activation rate (Hz)
         sEntry_t &         entry   // in/out, pointer to entry to initialize
         );

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // NAME:          Scheduler
      // DESCRIPTION:   Announce a new tick and activate tasks that are waiting.
      // RETURN VALUE:  None
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      static void Scheduler(
         const uint32_t tick    // in, current system tick
      );

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // NAME:          TickGet
      // DESCRIPTION:   Return the current system tick.
      // RETURN VALUE:  None
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      static uint32_t TickGet(void);

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // NAME:          TickGet
      // DESCRIPTION:   Return the tick for the specified subsystem.
      // RETURN VALUE:  None
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      static uint32_t TickGet(
          const CScheduler::sEntry_t &  entry   // in, entry to get
         );

   protected:
   private:

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // NAME:          CScheduler()
      // DESCRIPTION:   Default constructor.
      // RETURN VALUE:  None.
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      CScheduler()
      {}

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // NAME:          ~CScheduler()
      // DESCRIPTION:   Default destructor.
      // RETURN VALUE:  None.
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      ~CScheduler()
      {}

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // NAME:          EntryGet
      // DESCRIPTION:   Return a pointer to the entry identified by index.
      // RETURN VALUE:  pointer to entry on success, 0 on error.
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      static sEntry_t * EntryGet(
         const uint32_t	id // in, entry index
         );

   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   // VARIABLES
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   public:
   protected:
   private:
      static sEntry_t *                          mp_EntryList;   // chain list of entries registered.
      static uint32_t                            m_SystemClock;  // System clock frequency (ticks per sec)
      static uint32_t                            m_Tick;         // Current tick 0 - (m_SystemClock - 1)
}; // CScheduler
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#endif // cscheduler_included
