#ifndef canalogsampler_included
#define canalogsampler_included

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// FILE NAME:     $Source:$
//                $Date:$
//                $Revision:$
//
// AUTHOR:        Jean-Sebastien Stoezel (js.stoezel@gmail.com)
//
// DESCRIPTION:   The CAnalogSampler class defines a framework for the sampling of analog channels.
//
// HISTORY:       $Log:$
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// INCLUDES
#include "CSubsystem.hpp"
#include "eframework_config.hpp"
#include "ff.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define ANALOG_SAMPLER_BUFFER_NUM_SAMPLES  256
#define ANALOG_SAMPLER_BUFFER_NUM            2

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class CAnalogSampler :
	public CSubsystem
{

   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   // TYPES
   public:
	
      typedef enum
      {
         ASCII,   // Store samples in ASCII mode
         BINARY   // Store samples in binary mode
      } eLoggingMode_t;
      
      typedef enum
      {
         CMD_NEW_ANALOG_BUFFER,  // New buffer is ready for storing.
         CMD_NUM
      } eCmdIds_t;
      
      // Analog channel information
      typedef struct
      {
         char const *   p_Name;  // Channel name
         bool           enabled; // true if the channel is enabled for logging
      } sChannel_t;

      // Analog buffers
      typedef struct
      {
         uint16_t buffer[ANALOG_SAMPLER_BUFFER_NUM_SAMPLES];   // Sample buffer
         bool     inUse;                                       // True if the buffer is being used for storing back to file.
      } sAnalogBuffer_t;

   //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   protected:
   private:


   //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   // METHODS
   public:
   
      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // NAME:          CAnalogSampler
      // DESCRIPTION:   Default constructor
      // RETURN VALUE:  None.
      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	   CAnalogSampler(void);
      
      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // NAME:          ~CAnalogSampler
      // DESCRIPTION:   Default destructor
      // RETURN VALUE:  None.
      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
      ~CAnalogSampler(void);
      
      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // NAME:          ChannelInit
      // DESCRIPTION:   
      // RETURN VALUE:  0 on success, -1 otherwise..
      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
      int32_t ChannelInit(
	     const uint32_t id,   // in, channel identifier
	     const bool enabled, // in, channel rate
         const char name[]
      );
      
      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // NAME:          Modeset
      // DESCRIPTION:   Set the logging mode.
      // RETURN VALUE:  0 on success, -1 otherwise.
      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
      int32_t Modeset(
         const eLoggingMode_t mode  // in, set the logging mode
      );
      
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // NAME:          SamplesPush
      // DESCRIPTION:   Push samples from the ADC to the buffer.
      // RETURN VALUE:  None.
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      void SamplesPush(
         const uint32_t tick  // in, current tick.
      );
      
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // NAME:          SamplingRateSet
      // DESCRIPTION:   Populate the channel list with value from the ADC for the specified channel.
      // RETURN VALUE:  0 on success, -1 otherwise.
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      uint32_t SamplingRateSet(
	      const uint32_t	rate   // in, channel to sample.
	      );
   
   protected:

      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // NAME:          Init
      // DESCRIPTION:   Initialize the class.
      // RETURN VALUE:  0 on success, -1 otherwise.
      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual int32_t Init(void);

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // NAME:          CommandHandler
      // DESCRIPTION:   
      // RETURN VALUE:  None.
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual void CommandHandler(void);
      
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // NAME:          SampleGet
      // DESCRIPTION:   Populate the channel list with value from the ADC for the specified channel.
      // RETURN VALUE:  0 on success, -1 otherwise.
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual uint32_t SampleGet(
	      const uint32_t	channelId   // in, channel to sample.
	      );

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // NAME:          LogFileCreate
      // DESCRIPTION:   Create the log file.
      // RETURN VALUE:  None.
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      void LogFileCreate(void);

   private:

   //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   // VARIABLES	

   public:
   protected:
      sChannel_t *         mp_ChannelList;   // Channel list
      uint32_t             m_BufferIndex;    // Which buffer to use for storing data into.
      bool                m_BufferOverFlow;  // True if no samples could be added to the buffers.
      sAnalogBuffer_t      m_BufferList[ANALOG_SAMPLER_BUFFER_NUM];
      uint32_t             m_ClkDivider;     // Used to sample at the right rate.
      eLoggingMode_t       m_LoggingMode;    // How to store data
      uint32_t             m_NumChannels;  // Number of channels in the list
      uint32_t             m_SampleIndex;    // Current index in the buffer.
      
      
   private:
      FIL			   m_SamplerFile;    // Handle to sample file.

}; // class CAnalogSampler
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#endif // canalogsampler_included
